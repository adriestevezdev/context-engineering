services:
  postgres:
    image: postgres:17-alpine
    container_name: contextcraft-db
    environment:
      POSTGRES_USER: contextcraft
      POSTGRES_PASSWORD: password
      POSTGRES_DB: contextcraft
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U contextcraft"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - contextcraft-network

  adminer:
    image: adminer:latest
    container_name: contextcraft-adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - contextcraft-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: contextcraft-backend
    environment:
      DATABASE_URL: postgresql://contextcraft:password@postgres:5432/contextcraft
      SECRET_KEY: your-secret-key-here-change-in-production
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your-openai-api-key}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY:-your-clerk-secret-key}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - contextcraft-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: contextcraft-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8000/api/v1
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${CLERK_PUBLISHABLE_KEY:-your-clerk-publishable-key}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    command: npm run dev
    networks:
      - contextcraft-network

networks:
  contextcraft-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data: